Index: src/main/java/Model/Kayttaja.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\n\npublic class Kayttaja {\n    private String nimi;\n    private String rooli; // \"opettaja\" tai \"opiskelija\"\n\n    public Kayttaja(String nimi, String rooli) {\n        this.nimi = nimi;\n        this.rooli = rooli;\n    }\n\n    public String getNimi() {\n        return nimi;\n    }\n\n    public String getRooli() {\n        return rooli;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Model/Kayttaja.java b/src/main/java/Model/Kayttaja.java
--- a/src/main/java/Model/Kayttaja.java	
+++ b/src/main/java/Model/Kayttaja.java	
@@ -7,6 +7,7 @@
     public Kayttaja(String nimi, String rooli) {
         this.nimi = nimi;
         this.rooli = rooli;
+
     }
 
     public String getNimi() {
Index: src/main/java/Model/Kurssi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Kurssi {\n    private String nimi;\n    private List<FeedBack> feedbackList;\n\n    public Kurssi(String nimi) {\n        this.nimi = nimi;\n        this.feedbackList = new ArrayList<>();\n    }\n\n    public void addFeedback(String palaute, String opiskelijaNimi) {\n        feedbackList.add(new FeedBack(palaute, opiskelijaNimi));\n    }\n\n    public List<FeedBack> getFeedbackList() {\n        return feedbackList;\n    }\n\n    public String getNimi() {\n        return nimi;\n    }\n\n    public void printFeedback() { // Lisätty metodi\n        if (feedbackList.isEmpty()) {\n            System.out.println(\"Ei palautteita.\");\n        } else {\n            for (int i = 0; i < feedbackList.size(); i++) {\n                FeedBack fb = feedbackList.get(i);\n                System.out.println((i + 1) + \". \" + fb.toString());\n            }\n        }\n    }\n\n    public void removeFeedback(int i) {\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Model/Kurssi.java b/src/main/java/Model/Kurssi.java
--- a/src/main/java/Model/Kurssi.java	
+++ b/src/main/java/Model/Kurssi.java	
@@ -1,40 +1,40 @@
 package Model;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 public class Kurssi {
     private String nimi;
-    private List<FeedBack> feedbackList;
+    private Map<Opettaja, Kurssi> opettajanKurssit = new HashMap<>();
 
-    public Kurssi(String nimi) {
+    private List<FeedBack> feedbackList = new ArrayList<>();
+    public Kurssi(String nimi, Opettaja opettaja) {
         this.nimi = nimi;
-        this.feedbackList = new ArrayList<>();
+        this.opettajanKurssit.put(opettaja, this);
     }
 
-    public void addFeedback(String palaute, String opiskelijaNimi) {
-        feedbackList.add(new FeedBack(palaute, opiskelijaNimi));
-    }
 
     public List<FeedBack> getFeedbackList() {
         return feedbackList;
     }
+    public void addFeedback(String palaute, String opiskelijaNimi) {
+        FeedBack feedback = new FeedBack(palaute, opiskelijaNimi);
+        feedbackList.add(feedback);
+    }
 
+    public void addFeedback(FeedBack feedback) {
+        feedbackList.add(feedback);
+    }
+
+    public Map<Opettaja, Kurssi> getOpettajanKurssit() {
+        return opettajanKurssit;
+    }
     public String getNimi() {
         return nimi;
     }
 
-    public void printFeedback() { // Lisätty metodi
-        if (feedbackList.isEmpty()) {
-            System.out.println("Ei palautteita.");
-        } else {
-            for (int i = 0; i < feedbackList.size(); i++) {
-                FeedBack fb = feedbackList.get(i);
-                System.out.println((i + 1) + ". " + fb.toString());
-            }
-        }
-    }
 
-    public void removeFeedback(int i) {
-    }
+
 }
Index: src/main/java/Model/FeedBack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\n\npublic class FeedBack {\n    private String palaute;\n    private String opiskelijaNimi;\n\n    public FeedBack(String palaute, String opiskelijaNimi) {\n        this.palaute = palaute;\n        this.opiskelijaNimi = opiskelijaNimi;\n    }\n\n    public String getPalaute() { // Lisätty metodi\n        return palaute;\n    }\n\n    @Override\n    public String toString() {\n        return \"Opiskelija: \" + opiskelijaNimi + \"\\nPalaute: \" + palaute;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Model/FeedBack.java b/src/main/java/Model/FeedBack.java
--- a/src/main/java/Model/FeedBack.java	
+++ b/src/main/java/Model/FeedBack.java	
@@ -2,19 +2,14 @@
 
 public class FeedBack {
     private String palaute;
-    private String opiskelijaNimi;
+    private String[] colorPalaute;
 
     public FeedBack(String palaute, String opiskelijaNimi) {
         this.palaute = palaute;
-        this.opiskelijaNimi = opiskelijaNimi;
     }
 
     public String getPalaute() { // Lisätty metodi
         return palaute;
     }
 
-    @Override
-    public String toString() {
-        return "Opiskelija: " + opiskelijaNimi + "\nPalaute: " + palaute;
-    }
-}
+}
\ No newline at end of file
Index: src/main/java/Gui/FeedbackAppGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Gui/FeedbackAppGUI.java b/src/main/java/Gui/FeedbackAppGUI.java
deleted file mode 100644
--- a/src/main/java/Gui/FeedbackAppGUI.java	
+++ /dev/null	
@@ -1,261 +0,0 @@
-package Gui;
-
-import Model.FeedBack;
-import Model.Kayttaja;
-import Model.Kurssi;
-import javafx.application.Application;
-import javafx.scene.Scene;
-import javafx.scene.control.*;
-import javafx.scene.layout.VBox;
-import javafx.stage.Stage;
-
-import java.util.*;
-
-public class FeedbackAppGUI extends Application {
-
-    private Map<String, String> opettajatunnukset = new HashMap<>();
-    private Kayttaja kayttaja;
-    private Kurssi valittuKurssi;
-    private Map<String, List<Kurssi>> opettajaKurssit = new HashMap<>();
-
-    @Override
-    public void start(Stage primaryStage) {
-        primaryStage.setTitle("Palautejärjestelmä rooleilla");
-        opettajatunnukset.put("opettaja", "salasana123");
-        showLoginOptions(primaryStage);
-    }
-
-    private void showLoginOptions(Stage primaryStage) {
-        Label welcomeLabel = new Label("Valitse rooli:");
-        Button opiskelijaButton = new Button("Opiskelija - Kirjaudu sisään ilman tunnuksia");
-        opiskelijaButton.setOnAction(e -> {
-            kayttaja = new Kayttaja("Opiskelija", "opiskelija");
-            selectCourse(primaryStage);
-        });
-
-        Button opettajaButton = new Button("Opettaja - Kirjaudu tunnuksilla");
-        opettajaButton.setOnAction(e -> showTeacherLogin(primaryStage));
-
-        VBox layout = new VBox(10);
-        layout.getChildren().addAll(welcomeLabel, opiskelijaButton, opettajaButton);
-        Scene scene = new Scene(layout, 400, 300);
-        primaryStage.setScene(scene);
-        primaryStage.show();
-    }
-
-    private void showTeacherLogin(Stage primaryStage) {
-        Label loginLabel = new Label("Opettajan kirjautuminen");
-        TextField usernameInput = new TextField();
-        usernameInput.setPromptText("Käyttäjänimi");
-        PasswordField passwordInput = new PasswordField();
-        passwordInput.setPromptText("Salasana");
-
-        Button loginButton = new Button("Kirjaudu");
-        loginButton.setOnAction(e -> {
-            String username = usernameInput.getText();
-            String password = passwordInput.getText();
-
-            if (opettajatunnukset.containsKey(username) && opettajatunnukset.get(username).equals(password)) {
-                kayttaja = new Kayttaja(username, "opettaja");
-                selectTeacherAction(primaryStage);
-            } else {
-                showAlert("Virhe", "Kirjautuminen epäonnistui: Virheellinen käyttäjänimi tai salasana", Alert.AlertType.ERROR);
-            }
-        });
-
-        VBox layout = new VBox(10);
-        layout.getChildren().addAll(loginLabel, usernameInput, passwordInput, loginButton);
-        Scene scene = new Scene(layout, 400, 300);
-        primaryStage.setScene(scene);
-    }
-
-    private void selectTeacherAction(Stage primaryStage) {
-        Label actionLabel = new Label("Valitse toiminto:");
-        Button createCourseButton = new Button("Luo uusi kurssi");
-        Button viewCoursesButton = new Button("Näytä kurssit");
-        Button logoutButton = new Button("Kirjaudu ulos");
-
-        createCourseButton.setOnAction(e -> createCourse(primaryStage));
-        viewCoursesButton.setOnAction(e -> viewCourses(primaryStage));
-        logoutButton.setOnAction(e -> start(primaryStage));
-
-        VBox layout = new VBox(10);
-        layout.getChildren().addAll(actionLabel, createCourseButton, viewCoursesButton, logoutButton);
-        Scene scene = new Scene(layout, 400, 300);
-        primaryStage.setScene(scene);
-    }
-
-    private void createCourse(Stage primaryStage) {
-        TextInputDialog dialog = new TextInputDialog();
-        dialog.setTitle("Luo uusi kurssi");
-        dialog.setHeaderText("Syötä kurssin nimi:");
-        Optional<String> result = dialog.showAndWait();
-        result.ifPresent(courseName -> {
-            Kurssi newCourse = new Kurssi(courseName);
-            opettajaKurssit.computeIfAbsent(kayttaja.getNimi(), k -> new ArrayList<>()).add(newCourse);
-            showAlert("Onnistui", "Kurssi '" + courseName + "' luotu!", Alert.AlertType.INFORMATION);
-        });
-        selectTeacherAction(primaryStage);
-    }
-
-    private void viewCourses(Stage primaryStage) {
-        VBox courseLayout = new VBox(10);
-        List<Kurssi> courses = opettajaKurssit.getOrDefault(kayttaja.getNimi(), new ArrayList<>());
-        Label courseListLabel = new Label("Kurssit:");
-
-        if (courses.isEmpty()) {
-            courseListLabel.setText("Ei kursseja.");
-        } else {
-            for (Kurssi course : courses) {
-                Button feedbackButton = new Button(course.getNimi() + " - Näytä palautteet");
-                feedbackButton.setOnAction(e -> {
-                    valittuKurssi = course;
-                    showTeacherFeedbacks(primaryStage);
-                });
-
-                Button deleteButton = new Button("Poista kurssi");
-                deleteButton.setOnAction(e -> {
-                    opettajaKurssit.get(kayttaja.getNimi()).remove(course);
-                    showAlert("Onnistui", "Kurssi '" + course.getNimi() + "' poistettu!", Alert.AlertType.INFORMATION);
-                    viewCourses(primaryStage);
-                });
-
-                courseLayout.getChildren().addAll(feedbackButton, deleteButton);
-            }
-        }
-
-        Button backButton = new Button("Takaisin");
-        backButton.setOnAction(e -> selectTeacherAction(primaryStage));
-        courseLayout.getChildren().addAll(courseListLabel, backButton);
-        Scene courseScene = new Scene(courseLayout, 400, 300);
-        primaryStage.setScene(courseScene);
-    }
-
-    private void selectCourse(Stage primaryStage) {
-        VBox courseLayout = new VBox(10);
-        Label courseLabel = new Label("Valitse kurssi:");
-        List<Kurssi> allCourses = new ArrayList<>();
-        opettajaKurssit.values().forEach(allCourses::addAll);
-
-        if (allCourses.isEmpty()) {
-            courseLabel.setText("Ei kursseja saatavilla.");
-        } else {
-            for (Kurssi course : allCourses) {
-                Button courseButton = new Button(course.getNimi());
-                courseButton.setOnAction(e -> {
-                    valittuKurssi = course;
-                    showMainMenu(primaryStage);
-                });
-                courseLayout.getChildren().add(courseButton);
-            }
-        }
-
-        Button backButton = new Button("Takaisin");
-        backButton.setOnAction(e -> showLoginOptions(primaryStage));
-        courseLayout.getChildren().addAll(courseLabel, backButton);
-        Scene courseScene = new Scene(courseLayout, 400, 300);
-        primaryStage.setScene(courseScene);
-    }
-
-    private void showMainMenu(Stage primaryStage) {
-        Label userLabel = new Label("Kirjautunut: " + kayttaja.getNimi() + " (" + kayttaja.getRooli() + ")");
-        TextArea feedbackInput = new TextArea();
-        feedbackInput.setPromptText("Kirjoita palautteesi tähän...");
-
-        Button submitFeedback = new Button("Lähetä palaute");
-        submitFeedback.setOnAction(e -> {
-            if (valittuKurssi == null) {
-                showAlert("Virhe", "Et ole valinnut kurssia.", Alert.AlertType.ERROR);
-                return;
-            }
-
-            String palaute = feedbackInput.getText();
-            if (!palaute.isEmpty()) {
-                valittuKurssi.addFeedback(palaute, kayttaja.getNimi());
-                feedbackInput.clear();
-                showAlert("Onnistui", "Palaute lähetetty!", Alert.AlertType.INFORMATION);
-            } else {
-                showAlert("Virhe", "Palauteteksti ei voi olla tyhjä.", Alert.AlertType.ERROR);
-            }
-        });
-
-        Button viewFeedbacks = new Button("Näytä palautteet");
-        viewFeedbacks.setOnAction(e -> {
-            if (valittuKurssi == null) {
-                showAlert("Virhe", "Et ole valinnut kurssia.", Alert.AlertType.ERROR);
-                return;
-            }
-            showFeedbacks(primaryStage);
-        });
-
-        Button logoutButton = new Button("Kirjaudu ulos");
-        logoutButton.setOnAction(e -> start(primaryStage));
-
-        VBox layout = new VBox(10);
-        layout.getChildren().addAll(userLabel, feedbackInput, submitFeedback, viewFeedbacks, logoutButton);
-        Scene scene = new Scene(layout, 400, 300);
-        primaryStage.setScene(scene);
-    }
-
-    private void showFeedbacks(Stage primaryStage) {
-        VBox feedbackLayout = new VBox(10);
-        List<FeedBack> feedbacks = valittuKurssi.getFeedbackList();
-        Label feedbackListLabel = new Label("Palautteet:");
-
-        if (feedbacks.isEmpty()) {
-            feedbackListLabel.setText("Ei palautteita.");
-        } else {
-            for (int i = 0; i < feedbacks.size(); i++) {
-                FeedBack fb = feedbacks.get(i);
-                Label feedbackLabel = new Label((i + 1) + ". " + fb.toString());
-                feedbackLayout.getChildren().add(feedbackLabel);
-            }
-        }
-
-        Button backButton = new Button("Takaisin");
-        backButton.setOnAction(e -> showMainMenu(primaryStage));
-        feedbackLayout.getChildren().addAll(feedbackListLabel, backButton);
-        Scene feedbackScene = new Scene(feedbackLayout, 400, 300);
-        primaryStage.setScene(feedbackScene);
-    }
-
-    private void showTeacherFeedbacks(Stage primaryStage) {
-        VBox feedbackLayout = new VBox(10);
-        List<FeedBack> feedbacks = valittuKurssi.getFeedbackList();
-        Label feedbackListLabel = new Label("Palautteet:");
-
-        if (feedbacks.isEmpty()) {
-            feedbackListLabel.setText("Ei palautteita.");
-        } else {
-            for (int i = 0; i < feedbacks.size(); i++) {
-                FeedBack fb = feedbacks.get(i);
-                Label feedbackLabel = new Label((i + 1) + ". " + fb.toString());
-                feedbackLayout.getChildren().add(feedbackLabel);
-
-                int feedbackIndex = i; // Välimuuttuja
-                Button respondButton = new Button("Vastaa");
-                respondButton.setOnAction(e -> respondToFeedback(primaryStage, feedbackIndex));
-                feedbackLayout.getChildren().add(respondButton);
-            }
-        }
-
-        Button backButton = new Button("Takaisin");
-        backButton.setOnAction(e -> selectTeacherAction(primaryStage));
-        feedbackLayout.getChildren().addAll(feedbackListLabel, backButton);
-        Scene feedbackScene = new Scene(feedbackLayout, 400, 300);
-        primaryStage.setScene(feedbackScene);
-    }
-
-    private void respondToFeedback(Stage primaryStage, int feedbackIndex) {
-        // Implementoi palautteeseen vastaaminen
-        showAlert("Vastaaminen", "Vastaa palautteeseen, index: " + feedbackIndex, Alert.AlertType.INFORMATION);
-    }
-
-    private void showAlert(String title, String content, Alert.AlertType type) {
-        Alert alert = new Alert(type);
-        alert.setTitle(title);
-        alert.setHeaderText(null);
-        alert.setContentText(content);
-        alert.showAndWait();
-    }
-}
Index: src/main/java/Gui/Kirjaudu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Gui/Kirjaudu.java b/src/main/java/Gui/Kirjaudu.java
deleted file mode 100644
--- a/src/main/java/Gui/Kirjaudu.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-package Gui;
-
-public class Kirjaudu {
-}
Index: src/test/java/KurssiTest.java
===================================================================
diff --git a/src/test/java/KurssiTest.java b/src/test/java/KurssiTest.java
deleted file mode 100644
--- a/src/test/java/KurssiTest.java	
+++ /dev/null	
@@ -1,56 +0,0 @@
-import Model.Kurssi;
-import Model.FeedBack;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import java.util.List;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-class KurssiTest {
-    private Kurssi kurssi;
-
-    @BeforeEach
-    void setUp() {
-        kurssi = new Kurssi("Test Course");
-    }
-
-    @Test
-    void addFeedbackAddsFeedbackToList() {
-        kurssi.addFeedback("Great course!", "Musi Efaf");
-        List<FeedBack> feedbackList = kurssi.getFeedbackList();
-        assertEquals(1, feedbackList.size());
-        assertEquals("Great course!", feedbackList.get(0).getFeedbackText());
-    }
-
-    @Test
-    void removeFeedbackRemovesFeedbackFromList() {
-        kurssi.addFeedback("Great course!", "Kahli Mussi");
-        kurssi.removeFeedback(0);
-        assertTrue(kurssi.getFeedbackList().isEmpty());
-    }
-
-    @Test
-    void removeFeedbackDoesNotRemoveWhenIndexIsInvalid() {
-        kurssi.addFeedback("Great course!", "Peppi Pitkatossu");
-        kurssi.removeFeedback(1);
-        assertEquals(1, kurssi.getFeedbackList().size());
-    }
-
-    @Test
-    void answerFeedbackAddsAnswerToFeedback() {
-        kurssi.addFeedback("Great course!", "Saameri Uhanalainen");
-        kurssi.answerFeedback(0, "Thank you!");
-        assertEquals("Thank you!", kurssi.getFeedbackList().get(0).getOpettajanVastaus());
-    }
-
-
-
-    @Test
-    void getStudentFeedbackReturnsCorrectFeedbacks() {
-        kurssi.addFeedback("Great course!", "John Doe");
-        kurssi.addFeedback("I enjoyed this course.", "Jane Doe");
-        List<FeedBack> studentFeedbacks = kurssi.getStudentFeedback("John Doe");
-        assertEquals(2, studentFeedbacks.size());
-    }
-}
\ No newline at end of file
Index: src/main/java/Model/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Luodaan uusi kurssi\n        Kurssi kurssi = new Kurssi(\"Ohjelmointi 101\");\n\n        // Simuloidaan palautteen lisäämistä ja poistamista\n        Scanner scanner = new Scanner(System.in);\n        String input;\n        int choice;\n\n        do {\n            System.out.println(\"\\nValitse toiminto:\");\n            System.out.println(\"1. Lisää palaute\");\n            System.out.println(\"2. Poista palaute\");\n            System.out.println(\"3. Näytä palautteet\");\n            System.out.println(\"4. Lopeta\");\n            choice = scanner.nextInt();\n            scanner.nextLine();  // Tyhjennä skannerin rivinluku\n\n            switch (choice) {\n                case 1:\n                    System.out.print(\"Syötä palaute: \");\n                    input = scanner.nextLine();\n                    System.out.print(\"Syötä palautteen tekijän nimi: \");\n                    String opiskelijanNimi = scanner.nextLine();\n                    kurssi.addFeedback(input, opiskelijanNimi);\n                    break;\n                case 2:\n                    kurssi.printFeedback();\n                    System.out.print(\"Anna poistettavan palautteen numero: \");\n                    int index = scanner.nextInt();\n                    scanner.nextLine(); // Tyhjennä skannerin rivinluku\n                    kurssi.removeFeedback(index - 1);  // Indeksi alkaa 0:sta\n                    break;\n                case 3:\n                    kurssi.printFeedback();\n                    break;\n                case 4:\n                    System.out.println(\"Ohjelma lopetetaan.\");\n                    break;\n                default:\n                    System.out.println(\"Virheellinen valinta, yritä uudelleen.\");\n            }\n\n        } while (choice != 4);\n\n        scanner.close();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Model/Main.java b/src/main/java/Model/Main.java
--- a/src/main/java/Model/Main.java	
+++ b/src/main/java/Model/Main.java	
@@ -3,51 +3,5 @@
 import java.util.Scanner;
 
 public class Main {
-    public static void main(String[] args) {
-        // Luodaan uusi kurssi
-        Kurssi kurssi = new Kurssi("Ohjelmointi 101");
-
-        // Simuloidaan palautteen lisäämistä ja poistamista
-        Scanner scanner = new Scanner(System.in);
-        String input;
-        int choice;
-
-        do {
-            System.out.println("\nValitse toiminto:");
-            System.out.println("1. Lisää palaute");
-            System.out.println("2. Poista palaute");
-            System.out.println("3. Näytä palautteet");
-            System.out.println("4. Lopeta");
-            choice = scanner.nextInt();
-            scanner.nextLine();  // Tyhjennä skannerin rivinluku
-
-            switch (choice) {
-                case 1:
-                    System.out.print("Syötä palaute: ");
-                    input = scanner.nextLine();
-                    System.out.print("Syötä palautteen tekijän nimi: ");
-                    String opiskelijanNimi = scanner.nextLine();
-                    kurssi.addFeedback(input, opiskelijanNimi);
-                    break;
-                case 2:
-                    kurssi.printFeedback();
-                    System.out.print("Anna poistettavan palautteen numero: ");
-                    int index = scanner.nextInt();
-                    scanner.nextLine(); // Tyhjennä skannerin rivinluku
-                    kurssi.removeFeedback(index - 1);  // Indeksi alkaa 0:sta
-                    break;
-                case 3:
-                    kurssi.printFeedback();
-                    break;
-                case 4:
-                    System.out.println("Ohjelma lopetetaan.");
-                    break;
-                default:
-                    System.out.println("Virheellinen valinta, yritä uudelleen.");
-            }
 
-        } while (choice != 4);
-
-        scanner.close();
-    }
 }
Index: src/main/java/Gui/main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Gui;\n\npublic class main {\n    public static void main(String[] args) {\n        FeedbackAppGUI.launch(FeedbackAppGUI.class);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Gui/main.java b/src/main/java/Gui/main.java
--- a/src/main/java/Gui/main.java	
+++ b/src/main/java/Gui/main.java	
@@ -1,7 +1,4 @@
 package Gui;
 
 public class main {
-    public static void main(String[] args) {
-        FeedbackAppGUI.launch(FeedbackAppGUI.class);
-    }
 }
Index: src/main/java/Model/Opettaja.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Opettaja {\n    private String nimi;\n\n    // Mappi, joka tallentaa palautteen ja opettajan vastauksen.\n    private Map<Integer, String> palautteenVastaukset;\n\n    // Konstruktori\n    public Opettaja(String nimi) {\n        this.nimi = nimi;\n        this.palautteenVastaukset = new HashMap<>();\n    }\n\n    // Palautteen tarkistaminen\n    public void tarkistaPalautteet(Kurssi kurssi) {\n        System.out.println(\"Model.Opettaja: \" + nimi + \" tarkistaa palautteet kurssilta: \" + kurssi.getNimi());\n        kurssi.printFeedback();\n    }\n\n    // Vastaa palautteeseen\n    public void vastaaPalautteeseen(Kurssi kurssi, int palauteIndeksi, String vastaus) {\n        // Tarkistetaan, onko indeksi validi\n        if (palauteIndeksi > 0 && palauteIndeksi <= kurssi.getFeedbackList().size()) {\n            palautteenVastaukset.put(palauteIndeksi, vastaus);\n            System.out.println(\"Vastaus lisätty palautteeseen \" + palauteIndeksi + \": \" + vastaus);\n        } else {\n            System.out.println(\"Virhe: Indeksi ei kelpaa.\");\n        }\n    }\n\n    // Näytä kaikki vastaukset\n    public void naytaVastaukset() {\n        if (palautteenVastaukset.isEmpty()) {\n            System.out.println(\"Ei vastauksia palautteisiin.\");\n        } else {\n            System.out.println(\"Opettajan vastaukset:\");\n            for (Map.Entry<Integer, String> entry : palautteenVastaukset.entrySet()) {\n                System.out.println(\"Palaute nro \" + entry.getKey() + \": \" + entry.getValue());\n            }\n        }\n    }\n\n    // Palauttaa opettajan nimen\n    public String getNimi() {\n        return nimi;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Model/Opettaja.java b/src/main/java/Model/Opettaja.java
--- a/src/main/java/Model/Opettaja.java	
+++ b/src/main/java/Model/Opettaja.java	
@@ -4,48 +4,7 @@
 import java.util.Map;
 
 public class Opettaja {
-    private String nimi;
-
-    // Mappi, joka tallentaa palautteen ja opettajan vastauksen.
-    private Map<Integer, String> palautteenVastaukset;
-
-    // Konstruktori
-    public Opettaja(String nimi) {
-        this.nimi = nimi;
-        this.palautteenVastaukset = new HashMap<>();
-    }
-
-    // Palautteen tarkistaminen
-    public void tarkistaPalautteet(Kurssi kurssi) {
-        System.out.println("Model.Opettaja: " + nimi + " tarkistaa palautteet kurssilta: " + kurssi.getNimi());
-        kurssi.printFeedback();
-    }
+    String nimi;
 
-    // Vastaa palautteeseen
-    public void vastaaPalautteeseen(Kurssi kurssi, int palauteIndeksi, String vastaus) {
-        // Tarkistetaan, onko indeksi validi
-        if (palauteIndeksi > 0 && palauteIndeksi <= kurssi.getFeedbackList().size()) {
-            palautteenVastaukset.put(palauteIndeksi, vastaus);
-            System.out.println("Vastaus lisätty palautteeseen " + palauteIndeksi + ": " + vastaus);
-        } else {
-            System.out.println("Virhe: Indeksi ei kelpaa.");
-        }
-    }
 
-    // Näytä kaikki vastaukset
-    public void naytaVastaukset() {
-        if (palautteenVastaukset.isEmpty()) {
-            System.out.println("Ei vastauksia palautteisiin.");
-        } else {
-            System.out.println("Opettajan vastaukset:");
-            for (Map.Entry<Integer, String> entry : palautteenVastaukset.entrySet()) {
-                System.out.println("Palaute nro " + entry.getKey() + ": " + entry.getValue());
-            }
-        }
-    }
-
-    // Palauttaa opettajan nimen
-    public String getNimi() {
-        return nimi;
-    }
 }
\ No newline at end of file
